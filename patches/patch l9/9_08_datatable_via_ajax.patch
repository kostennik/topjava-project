Index: src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java	(date 1575499243000)
+++ src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java	(date 1575499816099)
@@ -1,15 +1,10 @@
 package ru.javawebinar.topjava.web;
 
-import org.assertj.core.matcher.AssertionMatcher;
 import org.junit.jupiter.api.Test;
-import ru.javawebinar.topjava.model.User;
-
-import java.util.List;
 
 import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 import static ru.javawebinar.topjava.MealTestData.MEALS;
-import static ru.javawebinar.topjava.UserTestData.*;
 import static ru.javawebinar.topjava.util.MealsUtil.getTos;
 
 class RootControllerTest extends AbstractControllerTest {
@@ -24,15 +19,7 @@
                 .andDo(print())
                 .andExpect(status().isOk())
                 .andExpect(view().name("users"))
-                .andExpect(forwardedUrl("/WEB-INF/jsp/users.jsp"))
-                .andExpect(model().attribute("users",
-                        new AssertionMatcher<List<User>>() {
-                            @Override
-                            public void assertion(List<User> actual) throws AssertionError {
-                                assertMatch(actual, ADMIN, USER);
-                            }
-                        }
-                ));
+                .andExpect(forwardedUrl("/WEB-INF/jsp/users.jsp"));
     }
 
     @Test
Index: src/main/webapp/WEB-INF/jsp/users.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/jsp/users.jsp	(date 1575499243000)
+++ src/main/webapp/WEB-INF/jsp/users.jsp	(date 1575499435370)
@@ -29,19 +29,6 @@
                 <th></th>
             </tr>
             </thead>
-            <c:forEach items="${users}" var="user">
-                <jsp:useBean id="user" type="ru.javawebinar.topjava.model.User"/>
-                <tr data-userEnabled="${user.enabled}">
-                    <td><c:out value="${user.name}"/></td>
-                    <td><a href="mailto:${user.email}">${user.email}</a></td>
-                    <td>${user.roles}</td>
-                    <td><input type="checkbox"
-                               <c:if test="${user.enabled}">checked</c:if> onclick="enable($(this), ${user.id})"/></td>
-                    <td><fmt:formatDate value="${user.registered}" pattern="dd-MMMM-yyyy"/></td>
-                    <td><a onclick=updateRow(${user.id})><span class="fa fa-pencil"></span></a></td>
-                    <td><a onclick="deleteRow(${user.id})"><span class="fa fa-remove"></span></a></td>
-                </tr>
-            </c:forEach>
         </table>
     </div>
 </div>
Index: src/main/webapp/resources/js/topjava.users.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/resources/js/topjava.users.js	(date 1575499243000)
+++ src/main/webapp/resources/js/topjava.users.js	(date 1575499435365)
@@ -20,6 +20,10 @@
     makeEditable({
             ajaxUrl: userAjaxUrl,
             datatableApi: $("#datatable").DataTable({
+                "ajax": {
+                    "url": userAjaxUrl,
+                    "dataSrc": ""
+                },
                 "paging": false,
                 "info": true,
                 "columns": [
@@ -27,24 +31,44 @@
                         "data": "name"
                     },
                     {
-                        "data": "email"
+                        "data": "email",
+                        "render": function (data, type, row) {
+                            if (type === "display") {
+                                return "<a href='mailto:" + data + "'>" + data + "</a>";
+                            }
+                            return data;
+                        }
                     },
                     {
                         "data": "roles"
                     },
                     {
-                        "data": "enabled"
+                        "data": "enabled",
+                        "render": function (data, type, row) {
+                            if (type === "display") {
+                                return "<input type='checkbox' " + (data ? "checked" : "") + " onclick='enable($(this)," + row.id + ");'/>";
+                            }
+                            return data;
+                        }
                     },
                     {
-                        "data": "registered"
+                        "data": "registered",
+                        "render": function (date, type, row) {
+                            if (type === "display") {
+                                return date.substring(0, 10);
+                            }
+                            return date;
+                        }
                     },
                     {
-                        "defaultContent": "Edit",
-                        "orderable": false
+                        "orderable": false,
+                        "defaultContent": "",
+                        "render": renderEditBtn
                     },
                     {
-                        "defaultContent": "Delete",
-                        "orderable": false
+                        "orderable": false,
+                        "defaultContent": "",
+                        "render": renderDeleteBtn
                     }
                 ],
                 "order": [
@@ -52,7 +76,12 @@
                         0,
                         "asc"
                     ]
-                ]
+                ],
+                "createdRow": function (row, data, dataIndex) {
+                    if (!data.enabled) {
+                        $(row).attr("data-userEnabled", false);
+                    }
+                }
             }),
             updateTable: function () {
                 $.get(userAjaxUrl, updateTableByData);
Index: src/main/webapp/resources/js/topjava.common.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/resources/js/topjava.common.js	(date 1575499243000)
+++ src/main/webapp/resources/js/topjava.common.js	(date 1575499435359)
@@ -79,4 +79,16 @@
         type: "error",
         layout: "bottomRight"
     }).show();
+}
+
+function renderEditBtn(data, type, row) {
+    if (type === "display") {
+        return "<a onclick='updateRow(" + row.id + ");'><span class='fa fa-pencil'></span></a>";
+    }
+}
+
+function renderDeleteBtn(data, type, row) {
+    if (type === "display") {
+        return "<a onclick='deleteRow(" + row.id + ");'><span class='fa fa-remove'></span></a>";
+    }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/web/RootController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/RootController.java	(date 1575499243000)
+++ src/main/java/ru/javawebinar/topjava/web/RootController.java	(date 1575499435355)
@@ -6,15 +6,12 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 import ru.javawebinar.topjava.service.MealService;
-import ru.javawebinar.topjava.service.UserService;
 import ru.javawebinar.topjava.util.MealsUtil;
 
 import javax.servlet.http.HttpServletRequest;
 
 @Controller
 public class RootController {
-    @Autowired
-    private UserService userService;
 
     @Autowired
     private MealService mealService;
@@ -25,8 +22,7 @@
     }
 
     @GetMapping("/users")
-    public String getUsers(Model model) {
-        model.addAttribute("users", userService.getAll());
+    public String getUsers() {
         return "users";
     }
 
