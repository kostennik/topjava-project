Index: src/test/java/ru/javawebinar/topjava/MealTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/MealTestData.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/test/java/ru/javawebinar/topjava/MealTestData.java	(date 1572959606944)
@@ -25,7 +25,7 @@
 
     public static final List<Meal> MEALS = List.of(MEAL7, MEAL6, MEAL5, MEAL4, MEAL3, MEAL2, MEAL1);
 
-    public static Meal getCreated() {
+    public static Meal getNew() {
         return new Meal(null, of(2015, Month.JUNE, 1, 18, 0), "Созданный ужин", 300);
     }
 
Index: src/main/java/ru/javawebinar/topjava/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserService.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/main/java/ru/javawebinar/topjava/service/UserService.java	(date 1572960761820)
@@ -7,7 +7,6 @@
 import org.springframework.util.Assert;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.repository.UserRepository;
-import ru.javawebinar.topjava.util.exception.NotFoundException;
 
 import java.util.List;
 
@@ -31,15 +30,15 @@
     }
 
     @CacheEvict(value = "users", allEntries = true)
-    public void delete(int id) throws NotFoundException {
+    public void delete(int id) {
         checkNotFoundWithId(repository.delete(id), id);
     }
 
-    public User get(int id) throws NotFoundException {
+    public User get(int id) {
         return checkNotFoundWithId(repository.get(id), id);
     }
 
-    public User getByEmail(String email) throws NotFoundException {
+    public User getByEmail(String email) {
         Assert.notNull(email, "email must not be null");
         return checkNotFound(repository.getByEmail(email), "email=" + email);
     }
@@ -50,7 +49,7 @@
     }
 
     @CacheEvict(value = "users", allEntries = true)
-    public void update(User user) throws NotFoundException {
+    public void update(User user) {
         Assert.notNull(user, "user must not be null");
         checkNotFoundWithId(repository.save(user), user.getId());
     }
Index: src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/main/java/ru/javawebinar/topjava/repository/jpa/JpaMealRepository.java	(date 1572776193947)
@@ -24,16 +24,14 @@
     @Override
     @Transactional
     public Meal save(Meal meal, int userId) {
-        if (!meal.isNew() && get(meal.getId(), userId) == null) {
-            return null;
-        }
         meal.setUser(em.getReference(User.class, userId));
         if (meal.isNew()) {
             em.persist(meal);
             return meal;
-        } else {
-            return em.merge(meal);
-        }
+        } else if (get(meal.getId(), userId) == null) {
+            return null;
+        }
+        return em.merge(meal);
     }
 
     @Override
Index: src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/main/java/ru/javawebinar/topjava/util/DateTimeUtil.java	(date 1572627090847)
@@ -32,15 +32,11 @@
     }
 
     public static LocalDateTime getStartInclusive(LocalDate localDate) {
-        return startOfDay(localDate != null ? localDate : MIN_DATE);
+        return (localDate != null ? localDate : MIN_DATE).atStartOfDay();
     }
 
     public static LocalDateTime getEndExclusive(LocalDate localDate) {
-        return startOfDay(localDate != null ? localDate.plus(1, ChronoUnit.DAYS) : MAX_DATE);
-    }
-
-    private static LocalDateTime startOfDay(LocalDate localDate) {
-        return LocalDateTime.of(localDate, LocalTime.MIN);
+        return (localDate != null ? localDate.plus(1, ChronoUnit.DAYS) : MAX_DATE).atStartOfDay();
     }
 }
 
Index: src/test/java/ru/javawebinar/topjava/service/MealServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/MealServiceTest.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/test/java/ru/javawebinar/topjava/service/MealServiceTest.java	(date 1572959675350)
@@ -39,6 +39,9 @@
 
     private static StringBuilder results = new StringBuilder();
 
+    @Autowired
+    private MealService service;
+
     @Rule
     public ExpectedException thrown = ExpectedException.none();
 
@@ -62,9 +65,6 @@
                 "\n---------------------------------");
     }
 
-    @Autowired
-    private MealService service;
-
     @Test
     public void delete() throws Exception {
         service.delete(MEAL1_ID, USER_ID);
@@ -86,7 +86,7 @@
 
     @Test
     public void create() throws Exception {
-        Meal newMeal = getCreated();
+        Meal newMeal = getNew();
         Meal created = service.create(newMeal, USER_ID);
         Integer newId = created.getId();
         newMeal.setId(newId);
@@ -103,7 +103,7 @@
     @Test
     public void getNotFound() throws Exception {
         thrown.expect(NotFoundException.class);
-        service.get(MEAL1_ID, ADMIN_ID);
+        service.get(1, ADMIN_ID);
     }
 
     @Test
Index: src/test/java/ru/javawebinar/topjava/service/UserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/UserServiceTest.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/test/java/ru/javawebinar/topjava/service/UserServiceTest.java	(date 1572959606972)
@@ -16,8 +16,6 @@
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
 
-import java.util.Collections;
-import java.util.Date;
 import java.util.List;
 
 import static ru.javawebinar.topjava.UserTestData.*;
@@ -44,7 +42,7 @@
 
     @Test
     public void create() throws Exception {
-        User newUser = new User(null, "New", "new@gmail.com", "newPass", 1555, false, new Date(), Collections.singleton(Role.ROLE_USER));
+        User newUser = getNew();
         User created = service.create(newUser);
         Integer newId = created.getId();
         newUser.setId(newId);
@@ -87,9 +85,7 @@
 
     @Test
     public void update() throws Exception {
-        User updated = new User(USER);
-        updated.setName("UpdatedName");
-        updated.setCaloriesPerDay(330);
+        User updated = getUpdated();
         service.update(updated);
         assertMatch(service.get(USER_ID), updated);
     }
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(revision a6ad3cf7266f43e89cd3bf82fc96d09aa4a4e5e1)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1572959606956)
@@ -3,6 +3,8 @@
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
 
+import java.util.Collections;
+import java.util.Date;
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -15,6 +17,17 @@
     public static final User USER = new User(USER_ID, "User", "user@yandex.ru", "password", Role.ROLE_USER);
     public static final User ADMIN = new User(ADMIN_ID, "Admin", "admin@gmail.com", "admin", Role.ROLE_ADMIN);
 
+    public static User getNew() {
+        return new User(null, "New", "new@gmail.com", "newPass", 1555, false, new Date(), Collections.singleton(Role.ROLE_USER));
+    }
+
+    public static User getUpdated() {
+        User updated = new User(USER);
+        updated.setName("UpdatedName");
+        updated.setCaloriesPerDay(330);
+        return updated;
+    }
+
     public static void assertMatch(User actual, User expected) {
         assertThat(actual).isEqualToIgnoringGivenFields(expected, "registered", "roles");
     }
